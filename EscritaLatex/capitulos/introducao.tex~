\chapter{Introdução}

Operar no mercado de moedas de forma manual é muito arriscado e, portanto, não recomendado, uma vez que esse mercado é não previsível, o que pode provocar a perda do capital de um investidor em apenas alguns minutos. Em diversas situações, o mercado varia as cotações em apenas um minuto, sendo que a mesma variação pode ser feita durante horas. Para contornar esse problema, a plataforma MetaTrader\footnote{\url{http://www.metatrader4.com/}} oferece as linguagens MQL4 (Paradigma Estruturado) e MQL5 (Paradigma Orientado a Objetos) para construir Experts que operem de forma automatizada. 

A plataforma MetaTrader não oferece suporte de ferramentas de teste unitário para as linguagens MQL4 e MQL5. Após implementar um \i Expert, não é possível implementar testes unitários para verificar se as instruções programadas estão de acordo com o esperado. A única forma de verificar se o \i Expert está seguindo as estratégias programadas é usar uma conta real ou demo na plataforma e operar durante um período específico de tempo.

Não foi possível encontrar na literatura investigada até o momento ferramentas que realizem a análise estática de código fonte em MQL4 e MQL5. Portanto, torna-se difícil obter uma análise de critérios de aceitabilidade (ou orientada a métricas) no nível de código fonte dos \i Experts programados nessas linguagens.

Adicionalmente, o código da plataforma MetaTrader é fechado. Dessa forma, não é possível a colaboração da comunidade de desenvolvedores no que tange a evolução das funcionalidades da ferramenta anteriormente.

Diante das preocupações abordadas anteriormente, acredita-se que o desenvolvimento de um software de código aberto para investimento no mercado de moedas, orientada a modelos conceituais de diferentes paradigmas de programação bem como às boas práticas da Engenharia de Software como um todo, irá conferir ao investidor maior segurança e conforto em suas operações. Portanto, o software proposto será implementado em diferentes linguagens de programação, padrões de projeto adequados, testes unitários orientados à uma abordagem multiparadigma e análise qualitativa de código fonte. Um \i Expert (implementado em linguagem MQL4 ou MQL5) ou um conjunto de \i Experts serão substituídos pelo software. Nesse último caso, o software terá a propriedade de controlar e/ou monitorar um ou mais Experts.
Este trabalho, portanto irá responder a seguinte questão de pesquisa: é possível desenvolver um software multiparadigma que substitua os \i Experts convencionais do mercado de moedas?

\section{Objetivos}
Este trabalho tem como objetivo geral desenvolver o software multiparadigma
InvestMVC que utiliza métodos matemáticos para automação de estratégias financeiras no mercado FOREX.
Considerando o Mercado de Moedas e os Paradigmas de Programação Estruturado, Orientado a Objetos, Funcional, Lógico e Multiagentes, são objetivos específicos deste
trabalho:

\begin{enumerate}
\item  Selecionar métodos matemáticos a serem implementados no software InvestMVC com utilização de um protocolo de experimentação;

\item Caracterizar as estruturas e componentes do software InvestMVC;

\item Realizar análise estática do código fonte dos produtos de software a partir de métricas de qualidade previamente definidas;

\item  Apurar a cobertura de código por meio de ferramentas que implementam testes unitários nos Paradigmas Estruturado (linguagem C), Multiagentes (linguagem Java),Lógico (linguagem Prolog) e Funcional (linguagem Haskell);

\item Desenvolver testes de integração e funcionais para a software InvestMVC;

\item Comparar resultados financeiros obtidos pelo software InvestMVC com os \i Experts tradicionais implementados em linguagem MQL;
\end{enumerate}

\section{Organização do Trabalho}

No capítulo 2, é apresentado o referencial teórico quanto ao contexto financeiro, métodos matemáticos e aos paradigmas de programação. No contexto financeiro são tratados os atributos atrelados ao mercado de moedas como alavancagem, suporte e resistência. Em métodos matemáticos, é realizada uma descrição dos métodos de Fibonacci, Correlação de Pearson, Mínimos Quadrados, Estocástico e Média Móvel. Em paradigmas de programação são descritos os paradigmas: estruturado, orientado a objetos, lógico, funcional e multiagentes. Em testes de software, são evidenciados quais os tipos de testes serão utilizados neste trabalho e também quais linguagens terão testes. Por fim, em qualidade de software são externalizadas as métricas de qualidade de  código fonte, critérios para interpretação das métricas e ferramentas de análise estática. 

No capítulo 3, é apresentado a metodologia de pesquisa e seus atributos como classificação da pesquisa, atividades da pesquisa e execução da pesquisa.

No capítulo 4, é apresentado o cronograma.

No capítulo 5, é apresentado o suporte tecnológico como as ferramentas de testes unitários, de teste funcional, de analise estática de código fonte e, por fim, ferramentas do mercado de moedas.

No capítulo 6, é apresentado o protocolo de experimentação para seleção dos métodos matemáticos. Todos os passos para execução do protocolo são evidenciados como preparação, controle, projeto, execução, limitações e resultados.

No capítulo 7, é apresentada a proposta da solução acompanhada do backlog de histórias de usuário e arquitetura orientada a componentes.

No capítulo 8, é apresentado os resultados da solução de cada Componente.

Por fim, no capítulo 9 é apresentado as considerações finais.
